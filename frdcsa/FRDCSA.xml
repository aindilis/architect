<system>
  <title>
    Architect
    <!-- What it is called. Short. Easy to remember. Relevant. -->
  </title>
  <acronym-expansion>
    <!-- If it is an acronym, what does it expand to? -->
  </acronym-expansion>
  <slogan>
    <!-- What if any is the slogan? -->
  </slogan>
  <pi>
    <!-- Who is Principle Investigator? -->
  </pi>
  <short-description>
    Requirements and capabilities PSE
    <!-- "This system is a system that ..."

	 Syntactic  controls: The $title  system is  a (system  for)? "..."
	 Tag line, under 70 characters, do not puncuate end.
	 
	 Semantic controls:  Purpose of  short-description is to  provide a
	 one  line  summary that  gives  some  indication  of the  system's
	 capabilities  for  things  like  apt.   It is  equivalent  to  the
	 short-desc from the Debian control file.

	 QUOTED FROM DEBIAN POLICY

	 3.4.1 The single line synopsis

	 The single line synopsis should be kept brief - certainly under 80
	 characters.

	 Do not include the package  name in the synopsis line. The display
	 software knows how to display this already, and you do not need to
	 state it. Remember  that in many situations the  user may only see
	 the synopsis line - make it  as informative as you can.

	 (Answers question .)
    -->
  </short-description>
  <medium-description>
    Architect    semi-automatically   brokers   project    goals   and
    requirements with  software capabilities.  On the one  hand, it is
    active  as  a  master   planner  and  scheduler  in  the  software
    development and acquisition phases,  and on the other, it executes
    the  application of  packaged  software from  Packager to  satisfy
    goals from PSE.
    <!-- Similar to extended description for Debian.


	 (MyFRDCSA,
    BOSS, Hemoglobin)  I have no  idea why I just  wrote "Hemaglobin",
    I'm going to leave it in  as a divination.  Actually, it is highly
    appropriate, and illustrative, in the context of the digestive system analogy, altho

    
	 QUOTED FROM DEBIAN POLICY

	 3.4.2 The extended description

	 Do not try to continue  the single line synopsis into the extended
	 description.  This   will  not   work  correctly  when   the  full
	 description  is  displayed, and  makes  no  sense  where only  the
	 summary (the single line synopsis) is available.

	 The extended description should describe what the package does and
	 how  it relates  to  the rest  of  the system  (in  terms of,  for
	 example, which subsystem it is which part of).

	 The description field  needs to make sense to  anyone, even people
	 who  have  no idea  about  any of  the  things  the package  deals
	 with.[6]
    -->
    <summary>
      <!-- What does the system do? -->
    </summary>
    <relationship>
      <!-- What is the relation to the rest of the FRDCSA? -->
    </relationship>
    <lay-description>
      <!-- Give a non-technical description of what the system does. -->
    </lay-description>
  </medium-description>
  <long-description>
    <p>
      The  Architect is the  next logical  step of  the RADAR/Packager
      tool chain.  RADAR is a tool for automatically finding software.
      Packager is  a tool for automatically  packaging software.  Now,
      Architect is  a tool for automatically applying  software - that
      is, for  planning on how the  functionality of a  given piece of
      software  could be  automatically applied  to a  certain problem
      domain.  For  instance, it seems  fairly evident that  we should
      have  Q/A technology  working  with man  pages  (like the  umich
      demonstration).  Architect would be challenged with recording or
      discovering this application and for semi-automatically applying
      it.  So  Architect is obviously  the fulfillment of  the initial
      charge   to  "Cluster  (RADAR),   Study  (Packager)   and  Apply
      (Architect)".
    </p>
    <p>
      How does  Architect work?   Well, it is  a rather  large problem
      domain, but as usual we  only intend to make headway towards the
      problem - only  enough headway that leads us  to either a better
      solution on our own or until we find a research solution.
    </p>
    <p>
      But,  here is some  thinking.  Based  on functionality,  etc, as
      well  as theorem  proving capabilities,  Architect can  plot out
      potential  applications  and  generate  NL  summaries  of  these
      applications.  The user can then initiate new focused studies or
      review existing  plans, much  like the corresponding  methods in
      RADAR.
    </p>
    <p>
      When a plan is approved  architect creates plans to assemble the
      necessary components  for the newly envisioned  system.  It thus
      naturally interfaces with functionality  of BOSS in creating and
      managing new projects.
    </p>
    
    <intro>
      <!-- Long  description goes on  the codebase  website as  the Project
	   Description.  One  or more  paragraphs that gives  very detailed
	   information about the project or codebase.
      -->
    </intro>
    <provides>
      <!-- What does package do technically? -->
      <capability>
      </capability>
    </provides>
    <relationships>
      <!-- What is the technical relation to FRDCSA subsystems? -->
      <subsystems>
      </subsystems>
      <supersystems>
      </supersystems>
      <package-dependencies>
	<!-- What Debian packages does this depend on? -->
      </package-dependencies>
      <other-dependencies>
	<!-- What codebases does this depend on? -->
      </other-dependencies>
    </relationships>
    <technical-description>
      <!-- Give a detailed technical description. -->
    </technical-description>
    <relevant-information>
      <!-- Give any other relevant information. -->
    </relevant-information>
    <conclusion>
    </conclusion>
    <links>
      <link>
      </link>
    </links>
  </long-description>
</system>